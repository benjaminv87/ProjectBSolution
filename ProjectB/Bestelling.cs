//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProjectB
{
    using System;
    using System.Collections.Generic;
    
    public partial class Bestelling
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Bestelling()
        {
            this.BestellingProduct = new HashSet<BestellingProduct>();
        }
    
        public int BestellingID { get; set; }
        public Nullable<System.DateTime> DatumOpgemaakt { get; set; }
        public Nullable<int> PersoneelslidID { get; set; }
        public Nullable<int> LeverancierID { get; set; }
        public Nullable<int> KlantID { get; set; }
    
        public virtual Klant Klant { get; set; }
        public virtual Leverancier Leverancier { get; set; }
        public virtual Personeelslid Personeelslid { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<BestellingProduct> BestellingProduct { get; set; }

        public int totaalProductenBestelling
        {
            get
            {
                int totaal = 0;
                foreach ( var item in BestellingProduct)
                {
                    totaal += (int)item.Aantal;
                }
                return totaal;
            }
        }
        public double totaalPrijsBestelling
        {
            get
            {
                double totaal = 0;
                foreach (var item in BestellingProduct)
                {
                    if (Klant != null) { totaal += (double)((item.Product.Inkoopprijs + (item.Product.Inkoopprijs / 100 * item.Product.Marge))*item.Aantal); }
                    else { totaal += (double)((item.Product.Inkoopprijs) * item.Aantal); };
                }
                return totaal;
            }
        }
    }
}
